!(function () { function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function") } function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor) } } function _createClass(Constructor, protoProps, staticProps) { return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Constructor } var _DOMPoint = (function () { "use strict"; function _DOMPoint() { var x = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, y = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, z = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, w = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1; _classCallCheck(this, _DOMPoint), this.x = x, this.y = y, this.z = z, this.w = w } return _createClass(_DOMPoint, [{ key: "matrixTransform", value: function matrixTransform(matrix) { return (matrix.is2D || matrix instanceof SVGMatrix) && 0 === this.z && 1 === this.w ? new _DOMPoint(this.x * matrix.a + this.y * matrix.c + matrix.e, this.x * matrix.b + this.y * matrix.d + matrix.f, 0, 1) : new _DOMPoint(this.x * matrix.m11 + this.y * matrix.m21 + this.z * matrix.m31 + this.w * matrix.m41, this.x * matrix.m12 + this.y * matrix.m22 + this.z * matrix.m32 + this.w * matrix.m42, this.x * matrix.m13 + this.y * matrix.m23 + this.z * matrix.m33 + this.w * matrix.m43, this.x * matrix.m14 + this.y * matrix.m24 + this.z * matrix.m34 + this.w * matrix.m44) } }, { key: "toJSON", value: function toJSON() { return { x: this.x, y: this.y, z: this.z, w: this.w } } }], [{ key: "fromPoint", value: function fromPoint(otherPoint) { return new _DOMPoint(otherPoint.x, otherPoint.y, void 0 !== otherPoint.z ? otherPoint.z : 0, void 0 !== otherPoint.w ? otherPoint.w : 1) } }]), _DOMPoint })(); window.DOMPoint = window.DOMPoint || _DOMPoint; for (var DOMRect = (function () { "use strict"; function DOMRect() { var x = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, y = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, width = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, height = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0; _classCallCheck(this, DOMRect), this.x = x, this.y = y, this.width = width, this.height = height } return _createClass(DOMRect, [{ key: "top", get: function get() { return this.y } }, { key: "left", get: function get() { return this.x } }, { key: "right", get: function get() { return this.x + this.width } }, { key: "bottom", get: function get() { return this.y + this.height } }, { key: "toJSON", value: function toJSON() { return { x: this.x, y: this.y, width: this.width, height: this.height, top: this.top, left: this.left, right: this.right, bottom: this.bottom } } }], [{ key: "fromRect", value: function fromRect(otherRect) { return new DOMRect(otherRect.x, otherRect.y, otherRect.width, otherRect.height) } }]), DOMRect })(), _i = 0, _arr = ["top", "right", "bottom", "left"]; _i < _arr.length; _i++) { var _propertyName = _arr[_i], _propertyDescriptor = Object.getOwnPropertyDescriptor(DOMRect.prototype, _propertyName); _propertyDescriptor.enumerable = !0, Object.defineProperty(DOMRect.prototype, _propertyName, _propertyDescriptor) } window.DOMRect = window.DOMRect || DOMRect; for (var M11 = 0, M12 = 1, M13 = 2, M14 = 3, M21 = 4, M22 = 5, M23 = 6, M24 = 7, M31 = 8, M32 = 9, M33 = 10, M34 = 11, M41 = 12, M42 = 13, M43 = 14, M44 = 15, A = M11, B = M12, C = M21, D = M22, E = M41, F = M42, DEGREE_PER_RAD = 180 / Math.PI, RAD_PER_DEGREE = Math.PI / 180, $values = Symbol(), $is2D = Symbol(), parseMatrix = function parseMatrix(init) { var parsed = init.replace(/matrix\(/, ""); if (6 !== (parsed = parsed.split(/,/, 7)).length) throw new Error("Failed to parse ".concat(init)); return [(parsed = parsed.map(parseFloat))[0], parsed[1], 0, 0, parsed[2], parsed[3], 0, 0, 0, 0, 1, 0, parsed[4], parsed[5], 0, 1] }, parseMatrix3d = function parseMatrix3d(init) { var parsed = init.replace(/matrix3d\(/, ""); if (16 !== (parsed = parsed.split(/,/, 17)).length) throw new Error("Failed to parse ".concat(init)); return parsed.map(parseFloat) }, parseTransform = function parseTransform(tform) { var type = tform.split(/\(/, 1)[0]; if ("matrix" === type) return parseMatrix(tform); if ("matrix3d" === type) return parseMatrix3d(tform); throw new Error("".concat(type, " parsing not implemented")) }, setNumber2D = function setNumber2D(receiver, index, value) { if ("number" != typeof value) throw new TypeError("Expected number"); receiver[$values][index] = value }, setNumber3D = function setNumber3D(receiver, index, value) { if ("number" != typeof value) throw new TypeError("Expected number"); index === M33 || index === M44 ? 1 !== value && (receiver[$is2D] = !1) : 0 !== value && (receiver[$is2D] = !1), receiver[$values][index] = value }, newInstance = function newInstance(values) { var instance = Object.create(DOMMatrix.prototype); return instance.constructor = DOMMatrix, instance[$is2D] = !0, instance[$values] = values, instance }, multiply = function multiply(first, second) { for (var dest = new Float64Array(16), i = 0; i < 4; i++)for (var j = 0; j < 4; j++) { for (var sum = 0, k = 0; k < 4; k++)sum += first[4 * i + k] * second[4 * k + j]; dest[4 * i + j] = sum } return dest }, DOMMatrix = (function () { "use strict"; function DOMMatrix(init) { if (_classCallCheck(this, DOMMatrix), this[$is2D] = !0, this[$values] = new Float64Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]), "string" == typeof init) { if ("" === init) return; var tforms = init.split(/\)\s+/, 20).map(parseTransform); if (0 === tforms.length) return; init = tforms[0]; for (var _i2 = 1; _i2 < tforms.length; _i2++)init = multiply(tforms[_i2], init) } var i = 0; if (init && 6 === init.length) setNumber2D(this, A, init[i++]), setNumber2D(this, B, init[i++]), setNumber2D(this, C, init[i++]), setNumber2D(this, D, init[i++]), setNumber2D(this, E, init[i++]), setNumber2D(this, F, init[i++]); else if (init && 16 === init.length) setNumber2D(this, M11, init[i++]), setNumber2D(this, M12, init[i++]), setNumber3D(this, M13, init[i++]), setNumber3D(this, M14, init[i++]), setNumber2D(this, M21, init[i++]), setNumber2D(this, M22, init[i++]), setNumber3D(this, M23, init[i++]), setNumber3D(this, M24, init[i++]), setNumber3D(this, M31, init[i++]), setNumber3D(this, M32, init[i++]), setNumber3D(this, M33, init[i++]), setNumber3D(this, M34, init[i++]), setNumber2D(this, M41, init[i++]), setNumber2D(this, M42, init[i++]), setNumber3D(this, M43, init[i++]), setNumber3D(this, M44, init[i]); else if (void 0 !== init) throw new TypeError("Expected string or array.") } return _createClass(DOMMatrix, [{ key: "m11", get: function get() { return this[$values][M11] }, set: function set(value) { setNumber2D(this, M11, value) } }, { key: "m12", get: function get() { return this[$values][M12] }, set: function set(value) { setNumber2D(this, M12, value) } }, { key: "m13", get: function get() { return this[$values][M13] }, set: function set(value) { setNumber3D(this, M13, value) } }, { key: "m14", get: function get() { return this[$values][M14] }, set: function set(value) { setNumber3D(this, M14, value) } }, { key: "m21", get: function get() { return this[$values][M21] }, set: function set(value) { setNumber2D(this, M21, value) } }, { key: "m22", get: function get() { return this[$values][M22] }, set: function set(value) { setNumber2D(this, M22, value) } }, { key: "m23", get: function get() { return this[$values][M23] }, set: function set(value) { setNumber3D(this, M23, value) } }, { key: "m24", get: function get() { return this[$values][M24] }, set: function set(value) { setNumber3D(this, M24, value) } }, { key: "m31", get: function get() { return this[$values][M31] }, set: function set(value) { setNumber3D(this, M31, value) } }, { key: "m32", get: function get() { return this[$values][M32] }, set: function set(value) { setNumber3D(this, M32, value) } }, { key: "m33", get: function get() { return this[$values][M33] }, set: function set(value) { setNumber3D(this, M33, value) } }, { key: "m34", get: function get() { return this[$values][M34] }, set: function set(value) { setNumber3D(this, M34, value) } }, { key: "m41", get: function get() { return this[$values][M41] }, set: function set(value) { setNumber2D(this, M41, value) } }, { key: "m42", get: function get() { return this[$values][M42] }, set: function set(value) { setNumber2D(this, M42, value) } }, { key: "m43", get: function get() { return this[$values][M43] }, set: function set(value) { setNumber3D(this, M43, value) } }, { key: "m44", get: function get() { return this[$values][M44] }, set: function set(value) { setNumber3D(this, M44, value) } }, { key: "a", get: function get() { return this[$values][A] }, set: function set(value) { setNumber2D(this, A, value) } }, { key: "b", get: function get() { return this[$values][B] }, set: function set(value) { setNumber2D(this, B, value) } }, { key: "c", get: function get() { return this[$values][C] }, set: function set(value) { setNumber2D(this, C, value) } }, { key: "d", get: function get() { return this[$values][D] }, set: function set(value) { setNumber2D(this, D, value) } }, { key: "e", get: function get() { return this[$values][E] }, set: function set(value) { setNumber2D(this, E, value) } }, { key: "f", get: function get() { return this[$values][F] }, set: function set(value) { setNumber2D(this, F, value) } }, { key: "is2D", get: function get() { return this[$is2D] } }, { key: "isIdentity", get: function get() { var values = this[$values]; return 1 === values[M11] && 0 === values[M12] && 0 === values[M13] && 0 === values[M14] && 0 === values[M21] && 1 === values[M22] && 0 === values[M23] && 0 === values[M24] && 0 === values[M31] && 0 === values[M32] && 1 === values[M33] && 0 === values[M34] && 0 === values[M41] && 0 === values[M42] && 0 === values[M43] && 1 === values[M44] } }, { key: "inspect", value: function inspect(depth, options) { return depth < 0 ? "[DOMMatrix]" : "DOMMatrix [\n        a: ".concat(this.a, "\n        b: ").concat(this.b, "\n        c: ").concat(this.c, "\n        d: ").concat(this.d, "\n        e: ").concat(this.e, "\n        f: ").concat(this.f, "\n        m11: ").concat(this.m11, "\n        m12: ").concat(this.m12, "\n        m13: ").concat(this.m13, "\n        m14: ").concat(this.m14, "\n        m21: ").concat(this.m21, "\n        m22: ").concat(this.m22, "\n        m23: ").concat(this.m23, "\n        m23: ").concat(this.m23, "\n        m31: ").concat(this.m31, "\n        m32: ").concat(this.m32, "\n        m33: ").concat(this.m33, "\n        m34: ").concat(this.m34, "\n        m41: ").concat(this.m41, "\n        m42: ").concat(this.m42, "\n        m43: ").concat(this.m43, "\n        m44: ").concat(this.m44, "\n        is2D: ").concat(this.is2D, "\n        isIdentity: ").concat(this.isIdentity, " ]") } }, { key: "multiply", value: function multiply(other) { return newInstance(this[$values]).multiplySelf(other) } }, { key: "multiplySelf", value: function multiplySelf(other) { return this[$values] = multiply(other[$values], this[$values]), other.is2D || (this[$is2D] = !1), this } }, { key: "preMultiplySelf", value: function preMultiplySelf(other) { return this[$values] = multiply(this[$values], other[$values]), other.is2D || (this[$is2D] = !1), this } }, { key: "translate", value: function translate(tx, ty, tz) { return newInstance(this[$values]).translateSelf(tx, ty, tz) } }, { key: "translateSelf", value: function translateSelf() { var tx = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, ty = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, tz = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0; return this[$values] = multiply([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1], this[$values]), 0 !== tz && (this[$is2D] = !1), this } }, { key: "scale", value: function scale(scaleX, scaleY, scaleZ, originX, originY, originZ) { return newInstance(this[$values]).scaleSelf(scaleX, scaleY, scaleZ, originX, originY, originZ) } }, { key: "scale3d", value: function scale3d(scale, originX, originY, originZ) { return newInstance(this[$values]).scale3dSelf(scale, originX, originY, originZ) } }, { key: "scale3dSelf", value: function scale3dSelf(scale, originX, originY, originZ) { return this.scaleSelf(scale, scale, scale, originX, originY, originZ) } }, { key: "scaleSelf", value: function scaleSelf(scaleX, scaleY, scaleZ, originX, originY, originZ) { return "number" != typeof originX && (originX = 0), "number" != typeof originY && (originY = 0), "number" != typeof originZ && (originZ = 0), this.translateSelf(originX, originY, originZ), "number" != typeof scaleX && (scaleX = 1), "number" != typeof scaleY && (scaleY = scaleX), "number" != typeof scaleZ && (scaleZ = 1), this[$values] = multiply([scaleX, 0, 0, 0, 0, scaleY, 0, 0, 0, 0, scaleZ, 0, 0, 0, 0, 1], this[$values]), this.translateSelf(-originX, -originY, -originZ), 1 === scaleZ && 0 === originZ || (this[$is2D] = !1), this } }, { key: "rotateFromVector", value: function rotateFromVector(x, y) { return newInstance(this[$values]).rotateFromVectorSelf(x, y) } }, { key: "rotateFromVectorSelf", value: function rotateFromVectorSelf() { var x = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, y = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, theta = 0 === x && 0 === y ? 0 : Math.atan2(y, x) * DEGREE_PER_RAD; return this.rotateSelf(theta) } }, { key: "rotate", value: function rotate(rotX, rotY, rotZ) { return newInstance(this[$values]).rotateSelf(rotX, rotY, rotZ) } }, { key: "rotateSelf", value: function rotateSelf(rotX, rotY, rotZ) { void 0 === rotY && void 0 === rotZ && (rotZ = rotX, rotX = rotY = 0), "number" != typeof rotY && (rotY = 0), "number" != typeof rotZ && (rotZ = 0), 0 === rotX && 0 === rotY || (this[$is2D] = !1), rotX *= RAD_PER_DEGREE, rotY *= RAD_PER_DEGREE, rotZ *= RAD_PER_DEGREE; var c = Math.cos(rotZ), s = Math.sin(rotZ); return this[$values] = multiply([c, s, 0, 0, -s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], this[$values]), c = Math.cos(rotY), s = Math.sin(rotY), this[$values] = multiply([c, 0, -s, 0, 0, 1, 0, 0, s, 0, c, 0, 0, 0, 0, 1], this[$values]), c = Math.cos(rotX), s = Math.sin(rotX), this[$values] = multiply([1, 0, 0, 0, 0, c, s, 0, 0, -s, c, 0, 0, 0, 0, 1], this[$values]), this } }, { key: "rotateAxisAngle", value: function rotateAxisAngle(x, y, z, angle) { return newInstance(this[$values]).rotateAxisAngleSelf(x, y, z, angle) } }, { key: "rotateAxisAngleSelf", value: function rotateAxisAngleSelf() { var x = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, y = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, z = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, angle = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, length = Math.sqrt(x * x + y * y + z * z); if (0 === length) return this; 1 !== length && (x /= length, y /= length, z /= length), angle *= RAD_PER_DEGREE; var c = Math.cos(angle), s = Math.sin(angle), t = 1 - c, tx = t * x, ty = t * y; return this[$values] = multiply([tx * x + c, tx * y + s * z, tx * z - s * y, 0, tx * y - s * z, ty * y + c, ty * z + s * x, 0, tx * z + s * y, ty * z - s * x, t * z * z + c, 0, 0, 0, 0, 1], this[$values]), 0 === x && 0 === y || (this[$is2D] = !1), this } }, { key: "skewX", value: function skewX(sx) { return newInstance(this[$values]).skewXSelf(sx) } }, { key: "skewXSelf", value: function skewXSelf(sx) { if ("number" != typeof sx) return this; var t = Math.tan(sx * RAD_PER_DEGREE); return this[$values] = multiply([1, 0, 0, 0, t, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], this[$values]), this } }, { key: "skewY", value: function skewY(sy) { return newInstance(this[$values]).skewYSelf(sy) } }, { key: "skewYSelf", value: function skewYSelf(sy) { if ("number" != typeof sy) return this; var t = Math.tan(sy * RAD_PER_DEGREE); return this[$values] = multiply([1, t, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], this[$values]), this } }, { key: "flipX", value: function flipX() { return newInstance(multiply([-1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], this[$values])) } }, { key: "flipY", value: function flipY() { return newInstance(multiply([1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], this[$values])) } }, { key: "inverse", value: function inverse() { return newInstance(this[$values]).invertSelf() } }, { key: "invertSelf", value: function invertSelf() { if (!this[$is2D]) throw new Error("3D matrix inversion is not implemented."); var det = this[$values][A] * this[$values][D] - this[$values][B] * this[$values][C]; if (0 !== det) { var result = new DOMMatrix; return result.a = this[$values][D] / det, result.b = -this[$values][B] / det, result.c = -this[$values][C] / det, result.d = this[$values][A] / det, result.e = (this[$values][C] * this[$values][F] - this[$values][D] * this[$values][E]) / det, result.f = (this[$values][B] * this[$values][E] - this[$values][A] * this[$values][F]) / det, result } this[$is2D] = !1, this[$values] = [NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN] } }, { key: "setMatrixValue", value: function setMatrixValue(transformList) { var temp = new DOMMatrix(transformList); return this[$values] = temp[$values], this[$is2D] = temp[$is2D], this } }, { key: "transformPoint", value: function transformPoint(point) { var x = point.x, y = point.y, z = point.z, w = point.w, values = this[$values], nx = values[M11] * x + values[M21] * y + values[M31] * z + values[M41] * w, ny = values[M12] * x + values[M22] * y + values[M32] * z + values[M42] * w, nz = values[M13] * x + values[M23] * y + values[M33] * z + values[M43] * w, nw = values[M14] * x + values[M24] * y + values[M34] * z + values[M44] * w; return new DOMPoint(nx, ny, nz, nw) } }, { key: "toFloat32Array", value: function toFloat32Array() { return Float32Array.from(this[$values]) } }, { key: "toFloat64Array", value: function toFloat64Array() { return this[$values].slice(0) } }, { key: "toJSON", value: function toJSON() { return { a: this.a, b: this.b, c: this.c, d: this.d, e: this.e, f: this.f, m11: this.m11, m12: this.m12, m13: this.m13, m14: this.m14, m21: this.m21, m22: this.m22, m23: this.m23, m24: this.m24, m31: this.m31, m32: this.m32, m33: this.m33, m34: this.m34, m41: this.m41, m42: this.m42, m43: this.m43, m44: this.m44, is2D: this.is2D, isIdentity: this.isIdentity } } }, { key: "toString", value: function toString() { return this.is2D ? "matrix(".concat(this.a, ", ").concat(this.b, ", ").concat(this.c, ", ").concat(this.d, ", ").concat(this.e, ", ").concat(this.f, ")") : "matrix3d(".concat(this[$values].join(", "), ")") } }], [{ key: "fromMatrix", value: function fromMatrix(init) { if (init instanceof DOMMatrix) return new DOMMatrix(init[$values]); if (init instanceof SVGMatrix) return new DOMMatrix([init.a, init.b, init.c, init.d, init.e, init.f]); throw new TypeError("Expected DOMMatrix") } }, { key: "fromFloat32Array", value: function fromFloat32Array(init) { if (!(init instanceof Float32Array)) throw new TypeError("Expected Float32Array"); return new DOMMatrix(init) } }, { key: "fromFloat64Array", value: function fromFloat64Array(init) { if (!(init instanceof Float64Array)) throw new TypeError("Expected Float64Array"); return new DOMMatrix(init) } }]), DOMMatrix })(), _i3 = 0, _arr2 = ["a", "b", "c", "d", "e", "f", "m11", "m12", "m13", "m14", "m21", "m22", "m23", "m24", "m31", "m32", "m33", "m34", "m41", "m42", "m43", "m44", "is2D", "isIdentity"]; _i3 < _arr2.length; _i3++) { var _propertyName3 = _arr2[_i3], _propertyDescriptor3 = Object.getOwnPropertyDescriptor(DOMMatrix.prototype, _propertyName3); _propertyDescriptor3.enumerable = !0, Object.defineProperty(DOMMatrix.prototype, _propertyName3, _propertyDescriptor3) } window.DOMMatrix = window.DOMMatrix || DOMMatrix; })();